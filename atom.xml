<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雨中過客</title>
  
  <subtitle>心情不好就不想说话</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kejieliu.github.io/"/>
  <updated>2019-01-15T04:38:32.549Z</updated>
  <id>https://kejieliu.github.io/</id>
  
  <author>
    <name>Jim Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql索引问题</title>
    <link href="https://kejieliu.github.io/2019/01/14/Mysql%E7%B4%A2%E5%BC%95%E9%97%AE%E9%A2%98/"/>
    <id>https://kejieliu.github.io/2019/01/14/Mysql索引问题/</id>
    <published>2019-01-14T11:06:25.000Z</published>
    <updated>2019-01-15T04:38:32.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h3><p>SQL经过简化<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> b <span class="keyword">on</span> a.RCheckEIDOne = b.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> c <span class="keyword">on</span> a.RCheckEIDTwo = c.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> d <span class="keyword">on</span> a.RCheckEIDThree = d.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> e <span class="keyword">on</span> a.JobId = e.JobID</span><br><span class="line"><span class="keyword">where</span> a.IsDelete = <span class="number">0</span> </span><br><span class="line"><span class="keyword">and</span> a.RStatus = <span class="number">3</span> </span><br><span class="line"><span class="keyword">and</span> a.RIID <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">and</span> a.RGuidangYear <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span> ( (a.JobID = RYJobIDOne <span class="keyword">and</span> RYJobSystemIDOne=<span class="string">'10'</span>) </span><br><span class="line">    <span class="keyword">or</span> (a.JobID = RYJobIDTwo <span class="keyword">and</span> RYJobSystemIDTwo=<span class="string">'10'</span>) </span><br><span class="line">    <span class="keyword">or</span> (a.JobID = RYJobIDThree <span class="keyword">and</span> RYJobSystemIDThree=<span class="string">'10'</span>) ) </span><br><span class="line"><span class="keyword">and</span> e.DepartID <span class="keyword">in</span> ( <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.RApplyDateTime</span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>添加索引情况如下：<br>索引情况较乱<br><img src="/assets/mysql/41801B84-D98C-4E24-BA3F-B9AEC92A3D4F.png" width="75%"><br>在查询一句Sql时，发现加limit与不加limit差异巨大<br>不加limit 5 查询时间如下（下图）：<br><img src="/assets/mysql/3614689F-E2B2-4C7C-95F2-B3FA99E7BA15.png" width="35%"><br>需要1.77秒<br>加limit 5 查询时间如下（下图）：<br><img src="/assets/mysql/F5FFD2CE-5CFA-4169-80B1-C7B1BC315FF0.png" width="35%"><br>需要15.00秒</p><h3 id="Mysql-Explain分析"><a href="#Mysql-Explain分析" class="headerlink" title="Mysql Explain分析"></a>Mysql Explain分析</h3><p>我们使用Mysql的Explanin来分析SQL语句，先来看下Explain的使用<br>点击学习<a href="https://segmentfault.com/a/1190000008131735?utm_source=tag-newest" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用分析</a><br>Explain输出格式<br><strong>select_type</strong></p><ol><li><strong>SIMPLE, 表示此查询不包含 UNION 查询或子查询</strong></li><li>PRIMARY, 表示此查询是最外层的查询</li><li>UNION, 表示此查询是 UNION 的第二或随后的查询</li><li>DEPENDENT UNION, UNION 中的第二个或后面的查询语句, 取决于外面的查询</li><li>UNION RESULT, UNION 的结果</li><li>SUBQUERY, 子查询中的第一个 SELECT</li><li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果</li></ol><p><strong>table</strong><br>表示查询涉及的表或衍生表</p><p><strong>type</strong></p><ol><li>system：表中只有一条数据. 这个类型是特殊的 const 类型.</li><li>const：针对主键或唯一索引的等值查询扫描, 最多只返回一行数据. const 查询速度非常快, 因为它仅仅读取一次即可.</li><li>eq_ref：此类型通常出现在多表的 join 查询, 表示对于前表的每一个结果, 都只能匹配到后表的一行结果. 并且查询的比较操作通常是 =, 查询效率较高.</li><li>ref：此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 最左前缀 规则索引的查询. </li><li>range：表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中.</li><li>index：表示全索引扫描(full index scan), 和 ALL 类型类似, 只不过 ALL 类型是全表扫描, 而 index 类型则仅仅扫描所有的索引, 而不扫描数据.</li><li>ALL：表示全表扫描, 这个类型的查询是性能最差的查询之一.<br>性能比较：<br><strong>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</strong></li></ol><p><strong>possible_keys</strong><br>表示 MySQL 在查询时, 能够使用到的索引. 注意, 即使有些索引在 possible_keys 中出现, 但是并不表示此索引会真正地被 MySQL 使用到. MySQL 在查询时具体使用了哪些索引, 由 key 字段决定.</p><p><strong>key</strong><br>此字段是 MySQL 在当前查询时所真正使用到的索引.</p><p><strong>key_len</strong><br>表示查询优化器使用了索引的字节数. 这个字段可以评估组合索引是否完全被使用, 或只有最左部分字段被使用到.</p><ul><li>字符串<br>  char(n): n 字节长度<br>  varchar(n): 如果是 utf8 编码, 则是 3 n + 2字节; 如果是 utf8mb4 编码, 则是 4 n + 2 字节.</li><li>数值类型:<br>  TINYINT: 1字节<br>  SMALLINT: 2字节<br>  MEDIUMINT: 3字节<br>  INT: 4字节<br>  BIGINT: 8字节</li><li>时间类型<br>  DATE: 3字节<br>  TIMESTAMP: 4字节<br>  DATETIME: 8字节</li><li>字段属性: NULL 属性 占用一个字节. 如果一个字段是 NOT NULL 的, 则没有此属性.</li></ul><p><strong>rows</strong><br>rows 也是一个重要的字段. MySQL 查询优化器根据统计信息, 估算 SQL 要查找到结果集需要扫描读取的数据行数.<br>这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p><p><strong>Extra</strong><br>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p><ul><li>Using filesort<br>当 Extra 中有 Using filesort 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li><li>Using index<br>“覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明性能不错</li><li>Using temporary<br>查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li></ul><p>下面尝添加explain来分析SQL语句<br>不加limit 5 分析（下图）：<br><img src="/assets/mysql/BC5B6725-30E7-443A-8C1D-18A0465268A0.png"><br>简要分析（主要针对table为a）：</p><ol><li>SIMPLE得出该SQL不包含UNION语句和子查询</li><li>type=ref显示该SQL包含较多join查询</li><li>可能用到的索引名称RYJobIDOne,RYJobIDTwo,RYJobIDThree,JobID,RStatus，但是实际只用到RStatus，RStatus为int型，为4字节，加上该字段可为NULL，再加1个字节，所以key_len=5字节</li></ol><p>加limit 5 分析（下图）：<br><img src="/assets/mysql/1CDF6121-0591-4E84-8982-257C9CF133D9.png"><br>简要分析（主要针对table为a）：</p><ol><li>与上述对比，差异主要在加了limit的语句实际使用的索引为RApplyDateTime。按上面的描述，datetime字段占用8字节，可为NULL再加1字节，还有2个字节去哪里死活查不到。也有可能是Mysql版本的愿原因，相同类型字段的占用字节数不同，此Mysql版本为5.5.52-MariaDB，这里可能datetime本身占用的是10字节。<br><img src="/assets/mysql/12CDFB9C49C6B68DA3F810FC365848ED.gif" width="25%"> </li></ol><p><strong><em>总结：索引乱加导致的后果，谨慎添加索引！！！</em></strong></p><h3 id="索引使用优化"><a href="#索引使用优化" class="headerlink" title="索引使用优化"></a>索引使用优化</h3><h4 id="MySQL索引的类型"><a href="#MySQL索引的类型" class="headerlink" title="MySQL索引的类型"></a>MySQL索引的类型</h4><ol><li>普通索引：这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。</li><li>唯一索引：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似。</li><li>全文索引（FULLTEXT）</li><li>单列索引、多列索引：<strong><em>多个单列索引与单个多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</em></strong></li><li>组合索引（最左前缀）：平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。<br>例如针对这三个字段x1、x2、x3，建立一个组合索引。建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：<ul><li>x1,x2,x3</li><li>x1,x2</li><li>x1</li></ul></li></ol><p>注意：最左匹配原则</p><ul><li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配</li><li>=和in可以乱序<h4 id="MySQL索引的优化"><a href="#MySQL索引的优化" class="headerlink" title="MySQL索引的优化"></a>MySQL索引的优化</h4></li></ul><ol><li>何时使用聚集索引或非聚集索引？</li></ol><table><thead><tr><th>动作描述</th><th style="text-align:center">使用聚集索引</th><th style="text-align:center">使用非聚集索引</th></tr></thead><tbody><tr><td>列经常被分组排序</td><td style="text-align:center">使用</td><td style="text-align:center">使用</td></tr><tr><td>返回某范围内的数据</td><td style="text-align:center">使用</td><td style="text-align:center">不使用</td></tr><tr><td>一个或极少不同值</td><td style="text-align:center">不使用</td><td style="text-align:center">不使用</td></tr><tr><td>小数目的不同值</td><td style="text-align:center">使用</td><td style="text-align:center">不使用</td></tr><tr><td>大数目的不同值</td><td style="text-align:center">不使用</td><td style="text-align:center">使用</td></tr><tr><td>频繁更新的列</td><td style="text-align:center">不使用</td><td style="text-align:center">使用</td></tr><tr><td>外键列</td><td style="text-align:center">使用</td><td style="text-align:center">使用</td></tr><tr><td>主键列</td><td style="text-align:center">使用</td><td style="text-align:center">使用</td></tr><tr><td>频繁修改索引列</td><td style="text-align:center">不使用</td><td style="text-align:center">使用</td></tr></tbody></table><ol start="2"><li>索引不会包含有NULL值的列<br>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</li><li>使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</li><li>索引列排序<br>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</li><li>like语句操作<br>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</li><li>不要在列上进行运算</li><li><p>存在and和or的组合时，Mysql会对SQL进行拆分，所以建立多个单或组合索引<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*    </span><br><span class="line"><span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> b <span class="keyword">on</span> a.RCheckEIDOne = b.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> c <span class="keyword">on</span> a.RCheckEIDTwo = c.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> d <span class="keyword">on</span> a.RCheckEIDThree = d.EID</span><br><span class="line"><span class="keyword">where</span> a.IsDelete = <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> a.RGuidangYear <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">and</span> (a.RCheckEIDOne = <span class="string">'11'</span></span><br><span class="line"><span class="keyword">or</span> a.RCheckEIDTwo = <span class="string">'22'</span></span><br><span class="line"><span class="keyword">or</span> a.RCheckEIDThree = <span class="string">'33'</span>)</span><br></pre></td></tr></table></figure><p> 需要建立三个索引，如下图：<br> <img src="/assets/mysql/5FE5B230-F17D-4B81-8E02-E4EB613F52F2.png"><br> 使用explain分析可得下图：<br> <img src="/assets/mysql/CCEF515D-8AAC-4800-8F76-D6FA53128098.png" width="50%"><br> Mysql使用了3个索引来加快查询速度，Using union<em>3<br>**</em>总结：MySQL只对以下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。而理论上每张表里面最多可创建16个索引，不过除非是数据量真的很多，否则过多的使用索引也不是那么好玩的。***<br>详细请仔细阅读<br><a href="https://www.cnblogs.com/doudouxiaoye/p/5831449.html" target="_blank" rel="noopener">mysql索引的使用和优化</a><br><img src="/assets/mysql/85D652EBF843713865D57FFEC1CB1344.gif" width="25%"> </p></li></ol><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>我们回到开头的SQL<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> b <span class="keyword">on</span> a.RCheckEIDOne = b.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> c <span class="keyword">on</span> a.RCheckEIDTwo = c.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> d <span class="keyword">on</span> a.RCheckEIDThree = d.EID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> e <span class="keyword">on</span> a.JobId = e.JobID</span><br><span class="line"><span class="keyword">where</span> a.IsDelete = <span class="number">0</span> </span><br><span class="line"><span class="keyword">and</span> a.RStatus = <span class="number">3</span> </span><br><span class="line"><span class="keyword">and</span> a.RIID <span class="keyword">is</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">and</span> a.RGuidangYear <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span> ( (a.JobID = RYJobIDOne <span class="keyword">and</span> RYJobSystemIDOne=<span class="string">'10'</span>) </span><br><span class="line">    <span class="keyword">or</span> (a.JobID = RYJobIDTwo <span class="keyword">and</span> RYJobSystemIDTwo=<span class="string">'10'</span>) </span><br><span class="line">    <span class="keyword">or</span> (a.JobID = RYJobIDThree <span class="keyword">and</span> RYJobSystemIDThree=<span class="string">'10'</span>) ) </span><br><span class="line"><span class="keyword">and</span> e.DepartID <span class="keyword">in</span> ( <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.RApplyDateTime</span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span></span><br></pre></td></tr></table></figure></p><ol><li>先删除原表的所有索引.</li><li>因为Mysql会选择并使用最优的一个索引（<strong><em>注意：仅使用一个，排除存在or</em></strong>），也就是根据explain的分析可得，key_len越大（不绝对，根绝NULL原则），rows越小，这样SQL的执行效率最高。且我们尽量把where语句中的=、in操作操作放前面，其余的放后面（根绝最左匹配原则）.</li><li>将IsDelete、RStatus、JobID字段设置为不为NULL，其余的字段，可能为NULL，排除在外.</li><li>建立联合索引，根据不为NULL原则，先尝试建立以下索引（RStatus、IsDelete、JobID），如下图：<br> <img src="/assets/mysql/A17AC5E6-D838-4856-8483-D0146D146D3F.png"></li><li>使用explain分析，如下图：<br> <img src="/assets/mysql/AC3A2EEA-C772-47E1-8293-2A4ADCA7B155.png"><br> RStatus（int）4字节，IsDelete（int）4字节，JobID为varchar(50),50*4+2=202字节，总共4+4+202=210字节</li><li>再次运行带有limit的SQL语句，执行效率如下图：<br> <img src="/assets/mysql/9DF2F74B-3C71-4C6E-A6CB-D4DDC340232D.png" width="50%"></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>根据不同的SQL给表设置不同的索引，配合单列索引和所列索引，但是不要过多！</li><li>多多使用explain来分析！！</li><li>注意最左匹配原则！！！</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000008131735?utm_source=tag-newest" target="_blank" rel="noopener">MySQL 性能优化神器 Explain 使用分析</a><br><a href="https://www.cnblogs.com/doudouxiaoye/p/5831449.html" target="_blank" rel="noopener">mysql索引的使用和优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题由来&quot;&gt;&lt;a href=&quot;#问题由来&quot; class=&quot;headerlink&quot; title=&quot;问题由来&quot;&gt;&lt;/a&gt;问题由来&lt;/h3&gt;&lt;p&gt;SQL经过简化&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; b &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.RCheckEIDOne = b.EID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.RCheckEIDTwo = c.EID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; d &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.RCheckEIDThree = d.EID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;join&lt;/span&gt; e &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; a.JobId = e.JobID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; a.IsDelete = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; a.RStatus = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; a.RIID &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; a.RGuidangYear &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; ( (a.JobID = RYJobIDOne &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; RYJobSystemIDOne=&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; (a.JobID = RYJobIDTwo &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; RYJobSystemIDTwo=&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; (a.JobID = RYJobIDThree &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; RYJobSystemIDThree=&lt;span class=&quot;string&quot;&gt;&#39;10&#39;&lt;/span&gt;) ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; e.DepartID &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ( &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; a.RApplyDateTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://kejieliu.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://kejieliu.github.io/tags/Mysql/"/>
    
      <category term="数据库" scheme="https://kejieliu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性总结</title>
    <link href="https://kejieliu.github.io/2019/01/09/Java8%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://kejieliu.github.io/2019/01/09/Java8新特性总结/</id>
    <published>2019-01-09T12:12:58.000Z</published>
    <updated>2019-01-10T07:44:02.369Z</updated>
    
    <content type="html"><![CDATA[<p>主要总结哪些地方可以用<br><a id="more"></a></p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><h4 id="用lambda表达式实现Runnable"><a href="#用lambda表达式实现Runnable" class="headerlink" title="用lambda表达式实现Runnable"></a>用lambda表达式实现Runnable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(params) -&gt; expression</span><br><span class="line">(params) -&gt; statement</span><br><span class="line">(params) -&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Before Java8, too much code for too little to do"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java 8方式：</span></span><br><span class="line"><span class="keyword">new</span> Thread( () -&gt; System.out.println(<span class="string">"In Java8, Lambda expression rocks !!"</span>) ).start();</span><br></pre></td></tr></table></figure><h4 id="使用Java-8-lambda表达式进行事件处理"><a href="#使用Java-8-lambda表达式进行事件处理" class="headerlink" title="使用Java 8 lambda表达式进行事件处理"></a>使用Java 8 lambda表达式进行事件处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line">JButton show =  <span class="keyword">new</span> JButton(<span class="string">"Show"</span>);</span><br><span class="line">show.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Event handling without lambda expression is boring"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8方式：</span></span><br><span class="line">show.addActionListener((e) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"Light, Camera, Action !! Lambda expressions Rocks"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用lambda表达式对列表进行迭代"><a href="#使用lambda表达式对列表进行迭代" class="headerlink" title="使用lambda表达式对列表进行迭代"></a>使用lambda表达式对列表进行迭代</h4><p>针对集合进行循环遍历操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line">List features = Arrays.asList(<span class="string">"Lambdas"</span>, <span class="string">"Default Method"</span>, <span class="string">"Stream API"</span>, <span class="string">"Date and Time API"</span>);</span><br><span class="line"><span class="keyword">for</span> (String feature : features) &#123;</span><br><span class="line">    System.out.println(feature);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之后：</span></span><br><span class="line">List features = Arrays.asList(<span class="string">"Lambdas"</span>, <span class="string">"Default Method"</span>, <span class="string">"Stream API"</span>, <span class="string">"Date and Time API"</span>);</span><br><span class="line">features.forEach(n -&gt; System.out.println(n));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span><br><span class="line"><span class="comment">// 看起来像C++的作用域解析运算符</span></span><br><span class="line">features.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="使用lambda表达式和函数式接口Predicate"><a href="#使用lambda表达式和函数式接口Predicate" class="headerlink" title="使用lambda表达式和函数式接口Predicate"></a>使用lambda表达式和函数式接口Predicate</h4><p>适合用于过滤<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(args[])</span></span>&#123;</span><br><span class="line">    List languages = Arrays.asList(<span class="string">"Java"</span>, <span class="string">"Scala"</span>, <span class="string">"C++"</span>, <span class="string">"Haskell"</span>, <span class="string">"Lisp"</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Languages which starts with J :"</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.startsWith(<span class="string">"J"</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Languages which ends with a "</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.endsWith(<span class="string">"a"</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Print all languages :"</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Print no language : "</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">"Print language whose length greater than 4:"</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.length() &gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List names, Predicate condition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(String name: names)  &#123;</span><br><span class="line">        <span class="keyword">if</span>(condition.test(name)) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更好的办法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List names, Predicate condition)</span> </span>&#123;</span><br><span class="line">    names.stream().filter((name) -&gt; (condition.test(name))).forEach((name) -&gt; &#123;</span><br><span class="line">        System.out.println(name + <span class="string">" "</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何在lambda表达式中加入Predicate"><a href="#如何在lambda表达式中加入Predicate" class="headerlink" title="如何在lambda表达式中加入Predicate"></a>如何在lambda表达式中加入Predicate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 甚至可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span><br><span class="line"><span class="comment">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span><br><span class="line">Predicate&lt;String&gt; startsWithJ = (n) -&gt; n.startsWith(<span class="string">"J"</span>);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong = (n) -&gt; n.length() == <span class="number">4</span>;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(<span class="string">"nName, which starts with 'J' and four letter long is : "</span> + n));</span><br></pre></td></tr></table></figure><h4 id="Java-8中使用lambda表达式的Map和Reduce示例"><a href="#Java-8中使用lambda表达式的Map和Reduce示例" class="headerlink" title="Java 8中使用lambda表达式的Map和Reduce示例"></a>Java 8中使用lambda表达式的Map和Reduce示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用lambda表达式为每个订单加上12%的税</span></span><br><span class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    <span class="keyword">double</span> price = cost + .<span class="number">12</span>*cost;</span><br><span class="line">    System.out.println(price);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用lambda表达式</span></span><br><span class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line">costBeforeTax.stream().map((cost) -&gt; cost + .<span class="number">12</span>*cost).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为每个订单加上12%的税</span></span><br><span class="line"><span class="comment">// 老方法：</span></span><br><span class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer cost : costBeforeTax) &#123;</span><br><span class="line">    <span class="keyword">double</span> price = cost + .<span class="number">12</span>*cost;</span><br><span class="line">    total = total + price;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Total : "</span> + total);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 新方法：</span></span><br><span class="line">List costBeforeTax = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>);</span><br><span class="line"><span class="keyword">double</span> bill = costBeforeTax.stream().map((cost) -&gt; cost + .<span class="number">12</span>*cost).reduce((sum, cost) -&gt; sum + cost).get();</span><br><span class="line">System.out.println(<span class="string">"Total : "</span> + bill);</span><br></pre></td></tr></table></figure><h4 id="通过过滤创建一个String列表"><a href="#通过过滤创建一个String列表" class="headerlink" title="通过过滤创建一个String列表"></a>通过过滤创建一个String列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></span><br><span class="line">List&lt;String&gt; filtered = strList.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">System.out.printf(<span class="string">"Original List : %s, filtered list : %s %n"</span>, strList, filtered);</span><br></pre></td></tr></table></figure><h4 id="对列表的每个元素应用函数"><a href="#对列表的每个元素应用函数" class="headerlink" title="对列表的每个元素应用函数"></a>对列表的每个元素应用函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将字符串换成大写并用逗号链接起来</span></span><br><span class="line">List&lt;String&gt; G7 = Arrays.asList(<span class="string">"USA"</span>, <span class="string">"Japan"</span>, <span class="string">"France"</span>, <span class="string">"Germany"</span>, <span class="string">"Italy"</span>, <span class="string">"U.K."</span>,<span class="string">"Canada"</span>);</span><br><span class="line">String G7Countries = G7.stream().map(x -&gt; x.toUpperCase()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">System.out.println(G7Countries);</span><br></pre></td></tr></table></figure><h4 id="复制不同的值，创建一个子列表"><a href="#复制不同的值，创建一个子列表" class="headerlink" title="复制不同的值，创建一个子列表"></a>复制不同的值，创建一个子列表</h4><p>distinct() 方法来对集合进行去重<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用所有不同的数字创建一个正方形列表</span></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">9</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Integer&gt; distinct = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br><span class="line">System.out.printf(<span class="string">"Original List : %s,  Square Without duplicates : %s %n"</span>, numbers, distinct);</span><br></pre></td></tr></table></figure></p><h4 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数字的个数、最小值、最大值、总和以及平均值</span></span><br><span class="line">List&lt;Integer&gt; primes = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>);</span><br><span class="line">IntSummaryStatistics stats = primes.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">System.out.println(<span class="string">"Highest prime number in List : "</span> + stats.getMax());</span><br><span class="line">System.out.println(<span class="string">"Lowest prime number in List : "</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">"Sum of all prime numbers : "</span> + stats.getSum());</span><br><span class="line">System.out.println(<span class="string">"Average of all prime numbers : "</span> + stats.getAverage());</span><br></pre></td></tr></table></figure><p>参考<br><a href="http://www.importnew.com/16436.html" target="_blank" rel="noopener">Java8 lambda表达式10个示例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要总结哪些地方可以用&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://kejieliu.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://kejieliu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redux动手实现</title>
    <link href="https://kejieliu.github.io/2019/01/08/redux%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>https://kejieliu.github.io/2019/01/08/redux动手实现/</id>
    <published>2019-01-08T11:58:11.000Z</published>
    <updated>2019-01-10T07:47:35.948Z</updated>
    
    <content type="html"><![CDATA[<p>一段代码，终于理解得比较深了<br>摘自<a href="http://huziketang.mangojuice.top/books/react/lesson34" target="_blank" rel="noopener">动手实现Redux</a><br>下面这段代码暂时和React没有关系<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> listeners = []</span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> listeners.push(listener)</span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action)</span><br><span class="line">    listeners.forEach(<span class="function">(<span class="params">listener</span>) =&gt;</span> listener())</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch(&#123;&#125;) <span class="comment">// 初始化 state</span></span><br><span class="line">  <span class="keyword">return</span> &#123; getState, dispatch, subscribe &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderApp</span> (<span class="params">newAppState, oldAppState = &#123;&#125;</span>) </span>&#123; <span class="comment">// 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = &#123;&#125;</span></span><br><span class="line">  <span class="keyword">if</span> (newAppState === oldAppState) <span class="keyword">return</span> <span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'render app...'</span>)</span><br><span class="line">  renderTitle(newAppState.title, oldAppState.title)</span><br><span class="line">  renderContent(newAppState.content, oldAppState.content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span> (<span class="params">newTitle, oldTitle = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (newTitle === oldTitle) <span class="keyword">return</span> <span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'render title...'</span>)</span><br><span class="line">  <span class="keyword">const</span> titleDOM = <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>)</span><br><span class="line">  titleDOM.innerHTML = newTitle.text</span><br><span class="line">  titleDOM.style.color = newTitle.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderContent</span> (<span class="params">newContent, oldContent = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (newContent === oldContent) <span class="keyword">return</span> <span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'render content...'</span>)</span><br><span class="line">  <span class="keyword">const</span> contentDOM = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>)</span><br><span class="line">  contentDOM.innerHTML = newContent.text</span><br><span class="line">  contentDOM.style.color = newContent.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span> (<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: <span class="string">'React.js 小书'</span>,</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">        text: <span class="string">'React.js 小书内容'</span>,</span><br><span class="line">        color: <span class="string">'blue'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_TITLE_TEXT'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        title: &#123;</span><br><span class="line">          ...state.title,</span><br><span class="line">          text: action.text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE_TITLE_COLOR'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        title: &#123;</span><br><span class="line">          ...state.title,</span><br><span class="line">          color: action.color</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(stateChanger)</span><br><span class="line"><span class="keyword">let</span> oldState = store.getState() <span class="comment">// 缓存旧的 state</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newState = store.getState() <span class="comment">// 数据可能变化，获取新的 state</span></span><br><span class="line">  renderApp(newState, oldState) <span class="comment">// 把新旧的 state 传进去渲染</span></span><br><span class="line">  oldState = newState <span class="comment">// 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">renderApp(store.getState()) <span class="comment">// 首次渲染页面</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'UPDATE_TITLE_TEXT'</span>, <span class="attr">text</span>: <span class="string">'《React.js 小书》'</span> &#125;) <span class="comment">// 修改标题文本</span></span><br><span class="line">store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'UPDATE_TITLE_COLOR'</span>, <span class="attr">color</span>: <span class="string">'blue'</span> &#125;) <span class="comment">// 修改标题颜色</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一段代码，终于理解得比较深了&lt;br&gt;摘自&lt;a href=&quot;http://huziketang.mangojuice.top/books/react/lesson34&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;动手实现Redux&lt;/a&gt;&lt;br&gt;下面这段代码暂时和React没有关系&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="https://kejieliu.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://kejieliu.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://kejieliu.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>React Lifecycle总结</title>
    <link href="https://kejieliu.github.io/2019/01/03/ReactLifecycle/"/>
    <id>https://kejieliu.github.io/2019/01/03/ReactLifecycle/</id>
    <published>2019-01-03T14:52:52.000Z</published>
    <updated>2019-01-10T07:44:00.439Z</updated>
    
    <content type="html"><![CDATA[<p>生命周期版本根据React version 16.4进行整理<br><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React Lifecycle</a></p><p>ADD:<br>getDerivedStateFromProps<br>getSnapshotBeforeUpdate<br>UNSAFE:<br>UNSAFE_componentWillMount<br>UNSAFE_componentWillUpdate<br>UNSAFE_componentWillReceiveProps</p><a id="more"></a><p>常用的生命周期图<br><img src="/assets/react/lifecycle1.png"><br>在常用的生命周期之外，显示不常用的生命周期图<br><img src="/assets/react/lifecycle2.png"></p><h4 id="一、Mounting"><a href="#一、Mounting" class="headerlink" title="一、Mounting"></a>一、Mounting</h4><h5 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a><a href="https://reactjs.org/docs/react-component.html#constructor" target="_blank" rel="noopener">constructor()</a></h5><h5 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps()"></a><a href="https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops" target="_blank" rel="noopener">static getDerivedStateFromProps()</a></h5><p>用于替代<a href="https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate" target="_blank" rel="noopener">UNSAFE_componentWillUpdate()</a></p><h5 id="render"><a href="#render" class="headerlink" title="render()"></a><a href="https://reactjs.org/docs/react-component.html#render" target="_blank" rel="noopener">render()</a></h5><h5 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a><a href="https://reactjs.org/docs/react-component.html#componentdidmount" target="_blank" rel="noopener">componentDidMount()</a></h5><h5 id="UNSAFE-componentWillMount"><a href="#UNSAFE-componentWillMount" class="headerlink" title="UNSAFE_componentWillMount()"></a><a href="https://reactjs.org/docs/react-component.html#unsafe_componentwillmount" target="_blank" rel="noopener">UNSAFE_componentWillMount()</a></h5><p>v17会移除</p><h4 id="二、Updating"><a href="#二、Updating" class="headerlink" title="二、Updating"></a>二、Updating</h4><h5 id="static-getDerivedStateFromProps-1"><a href="#static-getDerivedStateFromProps-1" class="headerlink" title="static getDerivedStateFromProps()"></a><a href="https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops" target="_blank" rel="noopener">static getDerivedStateFromProps()</a></h5><h5 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a><a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate" target="_blank" rel="noopener">shouldComponentUpdate()</a></h5><p>if shouldComponentUpdate() returns false, then UNSAFE_componentWillUpdate(), render(), and componentDidUpdate() will not be invoked</p><h5 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a><a href="https://reactjs.org/docs/react-component.html#render" target="_blank" rel="noopener">render()</a></h5><h5 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate()"></a><a href="https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate" target="_blank" rel="noopener">getSnapshotBeforeUpdate()</a></h5><h5 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a><a href="https://reactjs.org/docs/react-component.html#componentdidupdate" target="_blank" rel="noopener">componentDidUpdate()</a></h5><h5 id="UNSAFE-componentWillUpdate"><a href="#UNSAFE-componentWillUpdate" class="headerlink" title="UNSAFE_componentWillUpdate()"></a><a href="https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate" target="_blank" rel="noopener">UNSAFE_componentWillUpdate()</a></h5><h5 id="UNSAFE-componentWillReceiveProps"><a href="#UNSAFE-componentWillReceiveProps" class="headerlink" title="UNSAFE_componentWillReceiveProps()"></a><a href="https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops" target="_blank" rel="noopener">UNSAFE_componentWillReceiveProps()</a></h5><h4 id="三、Unmounting"><a href="#三、Unmounting" class="headerlink" title="三、Unmounting"></a>三、Unmounting</h4><h5 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a><a href="https://reactjs.org/docs/react-component.html#componentwillunmount" target="_blank" rel="noopener">componentWillUnmount()</a></h5><h4 id="四、Error-Handling"><a href="#四、Error-Handling" class="headerlink" title="四、Error Handling"></a>四、Error Handling</h4><h5 id="static-getDerivedStateFromError"><a href="#static-getDerivedStateFromError" class="headerlink" title="static getDerivedStateFromError()"></a><a href="https://reactjs.org/docs/react-component.html#static-getderivedstatefromerror" target="_blank" rel="noopener">static getDerivedStateFromError()</a></h5><h5 id="componentDidCatch"><a href="#componentDidCatch" class="headerlink" title="componentDidCatch()"></a><a href="https://reactjs.org/docs/react-component.html#componentdidcatch" target="_blank" rel="noopener">componentDidCatch()</a></h5><p>参考<br><a href="https://juejin.im/post/5bea68a6e51d450cb20fdd70" target="_blank" rel="noopener">拥抱react新生命周期–getDerivedStateFromProps</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生命周期版本根据React version 16.4进行整理&lt;br&gt;&lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ADD:&lt;br&gt;getDerivedStateFromProps&lt;br&gt;getSnapshotBeforeUpdate&lt;br&gt;UNSAFE:&lt;br&gt;UNSAFE_componentWillMount&lt;br&gt;UNSAFE_componentWillUpdate&lt;br&gt;UNSAFE_componentWillReceiveProps&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="https://kejieliu.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://kejieliu.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Java学习记录</title>
    <link href="https://kejieliu.github.io/2018/12/27/JavaLearing/"/>
    <id>https://kejieliu.github.io/2018/12/27/JavaLearing/</id>
    <published>2018-12-27T13:03:16.000Z</published>
    <updated>2019-01-10T07:44:01.611Z</updated>
    
    <content type="html"><![CDATA[<p>以下根据后台项目合并请求!165进行记录：</p><h2 id="一、序列化操作"><a href="#一、序列化操作" class="headerlink" title="一、序列化操作"></a>一、序列化操作</h2><p>ObjectMapper为jackson库中自带<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">List&lt;TableTitleIndex&gt; tableTitleIndices = objectMapper.readValue(tableRowName, <span class="keyword">new</span> TypeReference&lt;List&lt;TableTitleIndex&gt;&gt;() &#123;&#125;);</span><br><span class="line">ListPageParam listPageParam = objectMapper.readValue(param, ListPageParam.class);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>可以将列表、实体类的json字符串序列化成相应的列表、实体类，反之亦然</p><h3 id="1、对象与json字符串、byte数组"><a href="#1、对象与json字符串、byte数组" class="headerlink" title="1、对象与json字符串、byte数组"></a>1、对象与json字符串、byte数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String jsonStr = mapper.writeValueAsString(user);</span><br><span class="line"><span class="keyword">byte</span>[] byteArr = mapper.writeValueAsBytes(user);</span><br><span class="line">XwjUser userDe = mapper.readValue(jsonStr, XwjUser.class);</span><br><span class="line">XwjUser useDe2 = mapper.readValue(byteArr, XwjUser.class);</span><br></pre></td></tr></table></figure><font color="red">注意，对象转json字符串时，对象中的NodeName首字母是大写，转出来是小写</font><h3 id="2、list集合与json字符串"><a href="#2、list集合与json字符串" class="headerlink" title="2、list集合与json字符串"></a>2、list集合与json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonStr = mapper.writeValueAsString(userList);</span><br><span class="line">List&lt;XwjUser&gt; userListDes = mapper.readValue(jsonStr, List.class);</span><br></pre></td></tr></table></figure><h3 id="3、map与json字符串"><a href="#3、map与json字符串" class="headerlink" title="3、map与json字符串"></a>3、map与json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String jsonStr = mapper.writeValueAsString(testMap);</span><br><span class="line">Map&lt;String, Object&gt; testMapDes = mapper.readValue(jsonStr, Map.class);</span><br></pre></td></tr></table></figure><h3 id="4、修改转换时的日期格式"><a href="#4、修改转换时的日期格式" class="headerlink" title="4、修改转换时的日期格式"></a>4、修改转换时的日期格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">String jsonStr = mapper.writeValueAsString(user);</span><br></pre></td></tr></table></figure><h2 id="二、时间类操作"><a href="#二、时间类操作" class="headerlink" title="二、时间类操作"></a>二、时间类操作</h2><p>Java8中推荐LocalDate LocalDateTime<br>具体详细请点击<a href="http://www.importnew.com/14140.html" target="_blank" rel="noopener">Java8 日期/时间（Date Time）API指南</a><br>其中重点格式化及解析<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Format examples</span></span><br><span class="line">    LocalDate date = LocalDate.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">"Default format of LocalDate="</span>+date);</span><br><span class="line">    <span class="comment">//specific format</span></span><br><span class="line">    System.out.println(date.format(DateTimeFormatter.ofPattern(<span class="string">"d::MMM::uuuu"</span>)));</span><br><span class="line">    System.out.println(date.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"> </span><br><span class="line">    LocalDateTime dateTime = LocalDateTime.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">"Default format of LocalDateTime="</span>+dateTime);</span><br><span class="line">    <span class="comment">//specific format</span></span><br><span class="line">    System.out.println(dateTime.format(DateTimeFormatter.ofPattern(<span class="string">"d::MMM::uuuu HH::mm::ss"</span>)));</span><br><span class="line">    System.out.println(dateTime.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line"> </span><br><span class="line">    Instant timestamp = Instant.now();</span><br><span class="line">    <span class="comment">//default format</span></span><br><span class="line">    System.out.println(<span class="string">"Default format of Instant="</span>+timestamp);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Parse examples</span></span><br><span class="line">    LocalDateTime dt = LocalDateTime.parse(<span class="string">"27::Apr::2014 21::39::48"</span>,DateTimeFormatter.ofPattern(<span class="string">"d::MMM::uuuu HH::mm::ss"</span>));</span><br><span class="line">    System.out.println(<span class="string">"Default format after parsing = "</span>+dt);</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Default format of LocalDate=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">28</span></span><br><span class="line"><span class="number">28</span>::Apr::<span class="number">2014</span></span><br><span class="line"><span class="number">20140428</span></span><br><span class="line">Default format of LocalDateTime=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">28</span>T16:<span class="number">25</span>:<span class="number">49.341</span></span><br><span class="line"><span class="number">28</span>::Apr::<span class="number">2014</span> <span class="number">16</span>::<span class="number">25</span>::<span class="number">49</span></span><br><span class="line"><span class="number">20140428</span></span><br><span class="line">Default format of Instant=<span class="number">2014</span>-<span class="number">04</span>-<span class="number">28</span>T23:<span class="number">25</span>:<span class="number">49.342</span>Z</span><br><span class="line">Default format after parsing = <span class="number">2014</span>-<span class="number">04</span>-<span class="number">27</span>T21:<span class="number">39</span>:<span class="number">48</span></span><br></pre></td></tr></table></figure></p><p>参考资料<br><a href="https://www.cnblogs.com/xuwenjin/p/8976696.html" target="_blank" rel="noopener">ObjectMapper使用</a><br><a href="https://www.journaldev.com/2800/java-8-date-localdate-localdatetime-instant" target="_blank" rel="noopener">Java 8 Date – LocalDate, LocalDateTime, Instant</a><br><a href="http://www.importnew.com/14140.html" target="_blank" rel="noopener">Java8 日期/时间（Date Time）API指南</a></p><p><span id="busuanzi_container_page_pv"><br>  本文阅读量 <span id="busuanzi_value_page_pv"></span><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下根据后台项目合并请求!165进行记录：&lt;/p&gt;
&lt;h2 id=&quot;一、序列化操作&quot;&gt;&lt;a href=&quot;#一、序列化操作&quot; class=&quot;headerlink&quot; title=&quot;一、序列化操作&quot;&gt;&lt;/a&gt;一、序列化操作&lt;/h2&gt;&lt;p&gt;ObjectMapper为jackson库中自带&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ObjectMapper objectMapper = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ObjectMapper();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;TableTitleIndex&amp;gt; tableTitleIndices = objectMapper.readValue(tableRowName, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;TableTitleIndex&amp;gt;&amp;gt;() &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ListPageParam listPageParam = objectMapper.readValue(param, ListPageParam.class);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://kejieliu.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://kejieliu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages and Hexo</title>
    <link href="https://kejieliu.github.io/2018/12/06/Github-Pages-and-Hexo/"/>
    <id>https://kejieliu.github.io/2018/12/06/Github-Pages-and-Hexo/</id>
    <published>2018-12-06T14:20:36.000Z</published>
    <updated>2019-01-07T12:02:08.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、GitHub准备"><a href="#一、GitHub准备" class="headerlink" title="一、GitHub准备"></a>一、GitHub准备</h2><p>1、参照<a href="https://pages.github.com" target="_blank" rel="noopener">https://pages.github.com</a> 新建仓库并设置，并测试username.github.io （username为注册名）能够正常访问。<br><a id="more"></a></p><h2 id="二、Hexo"><a href="#二、Hexo" class="headerlink" title="二、Hexo"></a>二、Hexo</h2><p>参照<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>搭建及部署至github，过程较简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>注意点：<br>（1）配置ssh，具体可参考别的文章<br>（2）第1条所说的username必须是注册名，不然会失败，例如我是KejieLiu，则必须创建名为 <strong>KejieLiu.github.io</strong> 的仓库名</p><h2 id="三、更换主题"><a href="#三、更换主题" class="headerlink" title="三、更换主题"></a>三、更换主题</h2><p>本次采用next主题</p><h3 id="1、下载主题"><a href="#1、下载主题" class="headerlink" title="1、下载主题"></a>1、下载主题</h3><p><a href="git clone https://github.com/iissnan/hexo-theme-next themes/next">next主题</a><br>将下载文件放置于themes下</p><h3 id="2、更改配置"><a href="#2、更改配置" class="headerlink" title="2、更改配置"></a>2、更改配置</h3><p>修改hexo配置文件_config.yml的theme: next<br>主题内各种配置参照<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a></p><h2 id="四、写作技巧说明"><a href="#四、写作技巧说明" class="headerlink" title="四、写作技巧说明"></a>四、写作技巧说明</h2><h3 id="1、如何让文章进行截断显示"><a href="#1、如何让文章进行截断显示" class="headerlink" title="1、如何让文章进行截断显示"></a>1、如何让文章进行截断显示</h3><p>在需要隐藏的地方加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure></p><p>之后的内容将不会进行展示</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、GitHub准备&quot;&gt;&lt;a href=&quot;#一、GitHub准备&quot; class=&quot;headerlink&quot; title=&quot;一、GitHub准备&quot;&gt;&lt;/a&gt;一、GitHub准备&lt;/h2&gt;&lt;p&gt;1、参照&lt;a href=&quot;https://pages.github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pages.github.com&lt;/a&gt; 新建仓库并设置，并测试username.github.io （username为注册名）能够正常访问。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://kejieliu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://kejieliu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown</title>
    <link href="https://kejieliu.github.io/2018/12/06/MarkDown/"/>
    <id>https://kejieliu.github.io/2018/12/06/MarkDown/</id>
    <published>2018-12-06T10:53:38.000Z</published>
    <updated>2019-01-10T07:44:01.059Z</updated>
    
    <content type="html"><![CDATA[<p>一、标题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><p>二、字体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure></p><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em>`</p><p><strong><em>这是斜体加粗的文字</em></strong></p><p><del>这是加删除线的文字</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</span><br><span class="line">&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</span><br><span class="line">&lt;font color=gray size=72&gt;color=gray&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>呈现效果</p><p><font face="黑体">我是黑体字</font></p><p><font face="微软雅黑">我是微软雅黑</font></p><p><font face="STCAIYUN">我是华文彩云</font></p><p><font color="#0099ff" size="7" face="黑体">color=#0099ff size=72 face=”黑体”</font></p><p><font color="#00ffff" size="72">color=#00ffff</font></p><p><font color="gray" size="72">color=gray</font><br>三、引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure></p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>四、分割线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure></p><hr><hr><hr><hr><p>五、图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![panda](http://wx4.sinaimg.cn/large/8de26d65ly8fnpo4tsuzlj20ij0ijtag.jpg)</span><br></pre></td></tr></table></figure></p><p><img src="http://wx4.sinaimg.cn/large/8de26d65ly8fnpo4tsuzlj20ij0ijtag.jpg" alt="panda"></p><p>直接写img标签即可，改变大小等属性<br><img src="http://wx4.sinaimg.cn/large/8de26d65ly8fnpo4tsuzlj20ij0ijtag.jpg" width="100" height="100"></p><p>六、超链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[天健](http://www.pccpa.cn)</span><br><span class="line">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure></p><p><a href="http://www.pccpa.cn" target="_blank" rel="noopener">天健</a><br><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p>七、列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">无序列表</span><br><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">有序列表</span><br><span class="line"></span><br><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">列表嵌套</span><br><span class="line"></span><br><span class="line">1. 列表内容</span><br><span class="line">   - 嘻嘻</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure></p><p>无序列表</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>有序列表</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><p>列表嵌套</p><ol><li>列表内容<ul><li>嘻嘻</li></ul></li><li>列表内容</li><li>列表内容</li></ol><p>八、表格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>姓名</th><th style="text-align:center">技能</th><th style="text-align:right">排行</th></tr></thead><tbody><tr><td>刘备</td><td style="text-align:center">哭</td><td style="text-align:right">大哥</td></tr><tr><td>关羽</td><td style="text-align:center">打</td><td style="text-align:right">二哥</td></tr><tr><td>张飞</td><td style="text-align:center">骂</td><td style="text-align:right">三弟</td></tr></tbody></table><p>九、代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`代码内容`</span><br></pre></td></tr></table></figure></p><p>  <code>代码内容</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/detail"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">resumeDetail</span><span class="params">(@RequestBody String resumeId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> resumeService.resumeDetail(resumeId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>十、流程图</p><p>需要配合安装hexo-filter-flowchart</p><div id="flowchart-0" class="flow-chart"></div><p>本文内容于<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">简书MarkDown教程</a>加工而成</p><p><span id="busuanzi_container_page_pv"><br>  本文阅读量 <span id="busuanzi_value_page_pv"></span><br></span></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]e=>end: End:>http://www.google.comop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>http://www.google.comc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、标题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 这是一级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 这是二级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 这是三级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 这是四级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### 这是五级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###### 这是六级标题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="https://kejieliu.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://kejieliu.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kejieliu.github.io/2018/12/06/hello-world/"/>
    <id>https://kejieliu.github.io/2018/12/06/hello-world/</id>
    <published>2018-12-06T01:28:23.833Z</published>
    <updated>2019-01-10T07:41:59.826Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>more<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><span id="busuanzi_container_page_pv"><br>  本文阅读量 <span id="busuanzi_value_page_pv"></span><br></span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://kejieliu.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://kejieliu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
